{"id":"../node_modules/@chakra-ui/hooks/dist/esm/use-const.js","dependencies":[{"name":"/Users/lilijiaxin/Desktop/codesmith/JobSwipe/node_modules/@chakra-ui/hooks/dist/esm/use-const.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/lilijiaxin/Desktop/codesmith/JobSwipe/package.json","includedInParent":true,"mtime":1610419750811},{"name":"/Users/lilijiaxin/Desktop/codesmith/JobSwipe/node_modules/@chakra-ui/hooks/package.json","includedInParent":true,"mtime":499162500000},{"name":"react","loc":{"line":1,"column":23},"parent":"/Users/lilijiaxin/Desktop/codesmith/JobSwipe/node_modules/@chakra-ui/hooks/dist/esm/use-const.js","resolved":"/Users/lilijiaxin/Desktop/codesmith/JobSwipe/node_modules/react/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useConst = useConst;\n\nvar _react = require(\"react\");\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConst(init) {\n  var ref = (0, _react.useRef)(null);\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init;\n  }\n\n  return ref.current;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/use-const.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":13,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":14,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":8,"column":0},"generated":{"line":15,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":10,"column":7},"generated":{"line":17,"column":0}},{"source":"../../src/use-const.ts","name":"useConst","original":{"line":10,"column":16},"generated":{"line":17,"column":9}},{"source":"../../src/use-const.ts","name":null,"original":{"line":10,"column":7},"generated":{"line":17,"column":17}},{"source":"../../src/use-const.ts","name":"init","original":{"line":10,"column":54},"generated":{"line":17,"column":18}},{"source":"../../src/use-const.ts","name":null,"original":{"line":10,"column":7},"generated":{"line":17,"column":22}},{"source":"../../src/use-const.ts","name":null,"original":{"line":10,"column":63},"generated":{"line":17,"column":24}},{"source":"../../src/use-const.ts","name":null,"original":{"line":11,"column":2},"generated":{"line":18,"column":0}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":11,"column":8},"generated":{"line":18,"column":6}},{"source":"../../src/use-const.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":18,"column":9}},{"source":"../../src/use-const.ts","name":"useRef","original":{"line":11,"column":14},"generated":{"line":18,"column":12}},{"source":"../../src/use-const.ts","name":null,"original":{"line":11,"column":31},"generated":{"line":18,"column":31}},{"source":"../../src/use-const.ts","name":"useRef","original":{"line":11,"column":14},"generated":{"line":18,"column":35}},{"source":"../../src/use-const.ts","name":null,"original":{"line":11,"column":2},"generated":{"line":18,"column":36}},{"source":"../../src/use-const.ts","name":null,"original":{"line":13,"column":2},"generated":{"line":20,"column":0}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":13,"column":6},"generated":{"line":20,"column":6}},{"source":"../../src/use-const.ts","name":null,"original":{"line":13,"column":9},"generated":{"line":20,"column":9}},{"source":"../../src/use-const.ts","name":"current","original":{"line":13,"column":10},"generated":{"line":20,"column":10}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":13,"column":6},"generated":{"line":20,"column":17}},{"source":"../../src/use-const.ts","name":null,"original":{"line":13,"column":22},"generated":{"line":20,"column":22}},{"source":"../../src/use-const.ts","name":null,"original":{"line":13,"column":2},"generated":{"line":20,"column":26}},{"source":"../../src/use-const.ts","name":null,"original":{"line":13,"column":28},"generated":{"line":20,"column":28}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":14,"column":4},"generated":{"line":21,"column":0}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":14,"column":4},"generated":{"line":21,"column":4}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":7},"generated":{"line":21,"column":7}},{"source":"../../src/use-const.ts","name":"current","original":{"line":14,"column":8},"generated":{"line":21,"column":8}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":14,"column":4},"generated":{"line":21,"column":15}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":18},"generated":{"line":21,"column":18}},{"source":"../../src/use-const.ts","name":"init","original":{"line":14,"column":25},"generated":{"line":21,"column":25}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":18},"generated":{"line":21,"column":29}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":34},"generated":{"line":21,"column":34}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":18},"generated":{"line":21,"column":44}},{"source":"../../src/use-const.ts","name":"init","original":{"line":14,"column":47},"generated":{"line":21,"column":47}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":51},"generated":{"line":21,"column":51}},{"source":"../../src/use-const.ts","name":null,"original":{"line":14,"column":18},"generated":{"line":21,"column":53}},{"source":"../../src/use-const.ts","name":"init","original":{"line":14,"column":56},"generated":{"line":21,"column":56}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":14,"column":4},"generated":{"line":21,"column":60}},{"source":"../../src/use-const.ts","name":null,"original":{"line":15,"column":3},"generated":{"line":22,"column":0}},{"source":"../../src/use-const.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":24,"column":0}},{"source":"../../src/use-const.ts","name":"ref","original":{"line":17,"column":9},"generated":{"line":24,"column":9}},{"source":"../../src/use-const.ts","name":null,"original":{"line":17,"column":12},"generated":{"line":24,"column":12}},{"source":"../../src/use-const.ts","name":"current","original":{"line":17,"column":13},"generated":{"line":24,"column":13}},{"source":"../../src/use-const.ts","name":null,"original":{"line":17,"column":2},"generated":{"line":24,"column":20}},{"source":"../../src/use-const.ts","name":null,"original":{"line":18,"column":1},"generated":{"line":25,"column":0}}],"sources":{"../../src/use-const.ts":"import { useRef } from \"react\"\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nexport function useConst<T extends any | (() => any)>(init: T) {\n  const ref = useRef<T | null>(null)\n\n  if (ref.current === null) {\n    ref.current = typeof init === \"function\" ? init() : init\n  }\n\n  return ref.current as T\n}\n"},"lineCount":null}},"error":null,"hash":"2185bee38e457d9524adbf627f78dad8","cacheData":{"env":{}}}